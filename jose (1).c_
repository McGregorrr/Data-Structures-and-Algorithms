#include <iostream>
#include <stack>
#include <string>
#include <cctype>

using namespace std;

int precedence(char op) {
    return (op == '*' || op == '/') ? 2 : (op == '+' || op == '-') ? 1 : 0;
}

int evaluate(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0;
    }
}

int calculate(const string& expr) {
    stack<int> operands;
    stack<char> operators;

    for (size_t i = 0; i < expr.length(); i++) {
        char c = expr[i];

        if (isdigit(c)) {
            int num = 0;
            while (isdigit(c)) {
                num = num * 10 + (c - '0');
                c = expr[++i];
            }
            operands.push(num);
            i--;
        } else if (c == '(') {
            operators.push(c);
        } else if (c == ')') {
            while (operators.top() != '(') {
                int b = operands.top(); operands.pop();
                int a = operands.top(); operands.pop();
                operands.push(evaluate(a, b, operators.top())); operators.pop();
            }
            operators.pop();
        } else if (c == '+' || c == '-' || c == '*' || c == '/') {
            while (!operators.empty() && precedence(c) <= precedence(operators.top())) {
                int b = operands.top(); operands.pop();
                int a = operands.top(); operands.pop();
                operands.push(evaluate(a, b, operators.top())); operators.pop();
            }
            operators.push(c);
        }
    }

    while (!operators.empty()) {
        int b = operands.top(); operands.pop();
        int a = operands.top(); operands.pop();
        operands.push(evaluate(a, b, operators.top())); operators.pop();
    }

    return operands.top();
}

int main() {
    string expression;
    cout << "Enter an expression: ";
    getline(cin, expression);
    cout << "Result: " << calculate(expression) << endl;
    return 0;
}